<?php

if (php_sapi_name() !== 'cli') exit;

global $clih;

require("vendor/autoload.php");
require("src/Main.php");

$clih = fopen("php://stdin", "r");

// cli agent is used also in 'Installer/template/hubleto'
if (!is_array($config)) $config = [];


$main = new \HubletoMain($config, \ADIOS\Core\Loader::ADIOS_MODE_LITE);
$main->initDatabaseConnections();
$main->loadConfigFromDB();

$cli = new \HubletoMain\Core\CliAgent($main);
$appManager = new \HubletoMain\Core\AppManager($main);
$appManager->setCli($cli);

function run(\HubletoMain\Core\AppManager $appManager, string $action, array $argv): bool {
  $exit = false;
  $cli = $appManager->cli;
  $main = $cli->main;

  try {
    switch ($action) {
      case 'help':
        $cli->cyan(file_get_contents(__DIR__ . "/hubleto-cli-help.md"));
      break;

      case 'init':

        define('HUBLETO_COMMUNITY_REPO', __DIR__ . '/apps/community');

        $packageNames = $argv[2] ?? 'core,sales';

        $rewriteBases = [];
        $lastRewriteBase = '';

        foreach (array_reverse(explode('/', str_replace('\\', '/', __DIR__))) as $tmpDir) {
          $rewriteBases[] = $lastRewriteBase . '/';
          $lastRewriteBase = '/' . $tmpDir . $lastRewriteBase;
        }

        $cli->green(': Configuration of the environment :' . "\n\n");
        $rewriteBase = $cli->choose($rewriteBases, 'ConfigEnv.rewriteBase', '/');
        $accountUrl = $cli->read('ConfigEnv.accountUrl', 'http://localhost/' . trim($rewriteBase, '/'));
        $dbHost = $cli->read('ConfigEnv.dbHost', 'localhost');
        $dbUser = $cli->read('ConfigEnv.dbUser (user must exist)', 'root');
        $dbPassword = $cli->read('ConfigEnv.dbPassword');
        $dbName = $cli->read('ConfigEnv.dbName (database will be created)', 'my_hubleto');
        $dbCodepage = $cli->read('ConfigEnv.dbCodepage', 'utf8mb4');

        $cli->green("\n");
        $cli->green(': Configuration of the admin account :' . "\n\n");

        $companyName = $cli->read('Account.companyName', 'My Company');
        $adminName = $cli->read('Account.adminName', 'John');
        $adminFamilyName = $cli->read('Account.adminFamilyName', 'Smith');
        $adminEmail = $cli->read('Account.adminEmail (will be used also for login)', 'john.smith@example.com');
        $adminPassword = $cli->read('Account.adminPassword (leave empty to generate random password)');

        if (empty($adminPassword)) $adminPassword = \ADIOS\Core\Helper::randomPassword();

        $mainConfig = [
          'db_host' => $dbHost,
          'db_user' => $dbUser,
          'db_password' => $dbPassword,
          'dir' => __DIR__,
          'logDir' => __DIR__ . '/log',

          'accountRootRewriteBase' => $rewriteBase,
          'accountRootFolder' => __DIR__,
          'accountRootUrl' => $accountUrl,
          'mainRootUrl' => $accountUrl, // main and account are the same folders in single-tenant installation
          'mainRootFolder' => __DIR__,
        ];

        $cli->cyan("\n");
        $cli->cyan("Hurray. Installing your Hubleto...\n");

        // install
        $installer = new \HubletoMain\Installer\Installer(
          $main,
          'local-env',
          '', // uid
          $companyName,
          $adminName,
          $adminFamilyName,
          $adminEmail,
          $adminPassword,
          $rewriteBase,
          __DIR__, // acccountRootFolder
          $accountUrl, // acccountUrl
          __DIR__, // mainRootFolder
          $accountUrl, // mainRootUrl
          __DIR__, // extRootFolder
          $dbHost,
          $dbName,
          $dbUser,
          $dbPassword,
          false, // randomize (deprecated)
        );

        foreach (explode(',', $packageNames) as $packageName) {
          $cli->cyan("  Package: {$packageName}\n");
          $installer->installedApps = $installer->packages[trim($packageName)];
        }

        $installer->createDatabase();
        $installer->installTables();
        $installer->installDefaultPermissions();
        $installer->createFoldersAndFiles();

        $cli->green("\n");
        $cli->green("All done! You're a fantastic CRM developer. Now you can:\n");
        $cli->green("  -> Open {$accountUrl} and sign in with '{$adminEmail}' and '{$adminPassword}'.\n");
        $cli->green("  -> Note for NGINX users: don't forget to configure your locations in nginx.conf.\n");
        $cli->green("     See https://developer.hubleto.com/nginx for more details.\n");
        $cli->green("  -> Create your app in ./src/apps.\n");
        $cli->green("     See https://developer.hubleto.com/start-developing-own-module for tips how to start.\n");
        $cli->green("     See https://developer.hubleto.com/publish-module for instructions how to publish.\n");
        $cli->green("  -> Check the developer's guide at https://developer.hubleto.com for more tips & tricks.\n");

      break;

      case 'factory-reset':
        $cli->green("Reinstalling all apps...\n");

        require_once(($main->config['dir'] ?? __DIR__) . "/ConfigApp.php");
        require_once(($main->config['accountDir'] ?? __DIR__) . "/ConfigEnv.php");

        foreach ($main->config['installedApps'] as $appClass => $appConfig) {
          try {
            $appManager->installApp($appClass, true);
          } catch (\Throwable $e) {
            $cli->red($e->getMessage() . "\n");
            $cli->red("\n\nThe error was caused by: " . $appClass . "\n");
            $cli->red("Verify, whether all your apps have correct dependencies or contact the developers.\n");
            break;
          }
        }

      break;

      case 'app':
        $appAction = $argv[2];
        try {
          switch ($appAction) {

            case 'list':
              $installedApps = $main->config['installedApps'];
              ksort($installedApps);

              $cli->cyan("You have following apps installed:\n");
              foreach ($installedApps as $appClass => $appConfig) $cli->cyan("  {$appClass}: " . json_encode($appConfig) . "\n");
            break;

            case 'install':

              $appClass = $argv[3] ?? '';
              $forceInstall = (bool) ($argv[4] ?? false);

              if (empty($appClass)) {
                $cli->red("What app you want to install? Usage: php hubleto app install <APP_NAME>\n");
              }

              require_once(($main->config['dir'] ?? __DIR__) . "/ConfigApp.php");
              require_once(($main->config['accountDir'] ?? __DIR__) . "/ConfigEnv.php");

              $appManager->installApp($appClass, $forceInstall);
              $cli->green("{$appClass} installed successfully.\n");
            break;

            case 'disable':

              $appClass = $argv[3] ?? '';
              $appManager->disableApp($appClass);
              $cli->green("{$appClass} disabled successfully.\n");
            break;
          }
        } catch (\Throwable $e) {
          $cli->red($e->getMessage() . "\n");
        }
      break;

      // case exit
      case 'exit':
        $exit = true;
      break;

      // default
      default:
        $cli->red("Don't know what to do.\n");
      break;
    }
  } catch (\Exception $e) {
    $cli->red("!!! ERROR. {$e->getMessage()}\n");
  }

  return $exit;
}

// MAIN code

$cli->green("Hubleto " . \HubletoMain::RELEASE . " CLI agent.\n");
$cli->green("\n");

$action = (string) ($argv[1] ?? '');

if (!empty($action)) {
  run($appManager, $action, $argv);
} else {
  $cli->green("Usage: php hubleto <command>\n");
  $cli->green("Example: php hubleto help\n");
}
