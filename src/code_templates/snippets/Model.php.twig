<?php

namespace {{ appNamespace }}\Models;

use \ADIOS\Core\Db\Column\Varchar;
use \ADIOS\Core\Db\Column\Decimal;
use \ADIOS\Core\Db\Column\Date;
use \ADIOS\Core\Db\Column\Lookup;

use \HubletoApp\Community\Settings\Models\User;

class {{ model }} extends \HubletoMain\Core\Models\Model
{

  public string $table = '{{ sqlTable }}';
  public string $recordManagerClass = RecordManagers\{{ model }}::class;
  public ?string $lookupSqlValue = 'concat("{{ model }} #", {%TABLE%}.id)';

  public array $relations = [ 
    'PARENT' => [ self::BELONGS_TO, User::class, 'id_parent', 'id' ]
  ];

  public function describeColumns(): array
  {
    return array_merge(parent::describeColumns(), [
      'id_manager' => (new Lookup($this, $this->translate('Lookup'), User::class)),
      'column_varchar' => (new Varchar($this, $this->translate('Varchar')))->setRequired(),
      'column_decimal' => (new Decimal($this, $this->translate('Number'))),
      'column_date' => (new Date($this, $this->translate('Date'))),
    ]);
  }

  public function describeTable(): \ADIOS\Core\Description\Table
  {
    $description = parent::describeTable();
    $description->ui['addButtonText'] = 'Add {{ model }}';
    $description->ui['showHeader'] = true;
    $description->ui['showFulltextSearch'] = true;
    $description->ui['showFooter'] = false;

    // Uncomment and modify these lines if you want to define defaultFilter for your model
    // $description->ui['defaultFilters'] = [
    //   'fArchive' => [ 'title' => 'Archive', 'options' => [ 0 => 'Active', 1 => 'Archived' ] ],
    // ];

    return $description;
  }

  public function onBeforeCreate(array $record): array
  {
    return parent::onBeforeCreate($record);
  }

  public function onBeforeUpdate(array $record): array
  {
    return parent::onBeforeUpdate($record);
  }

  public function onAfterUpdate(array $originalRecord, array $savedRecord): array
  {
    return parent::onAfterUpdate($savedRecord);
  }

  public function onAfterCreate(array $savedRecord): array
  {
    return parent::onAfterCreate($savedRecord);
  }

}
